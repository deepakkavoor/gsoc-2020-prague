results-prague-fq commit bad8c64 Tue Oct 13 23:29:14 2020 +0530
diff --git a/examples/tsvwg-scenarios.cc b/examples/tsvwg-scenarios.cc
index 56e0e1f..ce6fc3d 100644
--- a/examples/tsvwg-scenarios.cc
+++ b/examples/tsvwg-scenarios.cc
@@ -136,9 +136,9 @@
 //
 // Program options
 // ---------------
-//    --firstTcpType:       First TCP type (cubic, prague, or reno) [prague]
-//    --secondTcpType:      Second TCP type (cubic, prague, or reno) [cubic]
-//    --m3QueueType:        M3 queue type (fq, dualq, or codel) [fq]
+//    --firstTcpType:       First TCP type (prague, or reno) [prague]
+//    --secondTcpType:      Second TCP type (prague, or reno) [reno]
+//    --m3QueueType:        M3 queue type (fq or codel) [fq]
 //    --baseRtt:            base RTT [80ms]
 //    --controlScenario:    control scenario (disable M1 bottleneck) [false]
 //    --link3rate:          data rate of link 3 for FIFO scenarios [50Mbps]
@@ -331,9 +331,9 @@ main (int argc, char *argv[])
   uint32_t pingSize = 100; // bytes
   Time pingInterval = MilliSeconds (100);
   Time marksSamplingInterval = MilliSeconds (100);
-  // Time throughputSamplingInterval = MilliSeconds (200);
   Time throughputSamplingInterval = MilliSeconds (200);
   DataRate link3Rate ("50Mbps");
+  bool useEct0 = true;
   double link5RateRatio = 0.95;
   std::string pingTraceFile = "tsvwg-scenarios-ping.dat";
   std::string firstTcpRttTraceFile = "tsvwg-scenarios-first-tcp-rtt.dat";
@@ -355,7 +355,7 @@ main (int argc, char *argv[])
   ////////////////////////////////////////////////////////////
   bool enablePcap = false;
   bool controlScenario = false;
-  std::string firstTcpType = "cubic";
+  std::string firstTcpType = "reno";
   std::string secondTcpType = "";
   bool enableSecondTcp = false;
   std::string m3QueueType = "fq";
@@ -373,14 +373,8 @@ main (int argc, char *argv[])
   Config::SetDefault ("ns3::FifoQueueDisc::MaxSize", QueueSizeValue (QueueSize ("5000p")));
   // Enable L4S mode on Fq-CoDel with 1ms step threshold
   Config::SetDefault ("ns3::FqCoDelQueueDisc::UseEcn", BooleanValue (true));
-  // Config::SetDefault ("ns3::FqCoDelQueueDisc::CeThreshold", TimeValue (MilliSeconds (1)));
-  Config::SetDefault ("ns3::FqCoDelQueueDisc::UseL4s", BooleanValue (true));
-
-  Config::SetDefault ("ns3::FqCoDelQueueDisc::UseL4s", BooleanValue (false));
-  // Config::SetDefault ("ns3::DualQCoupledPi2QueueDisc::A", DoubleValue (0.16));
-  // Config::SetDefault ("ns3::DualQCoupledPi2QueueDisc::B", DoubleValue (3.20));
-  // Config::SetDefault ("ns3::DualQCoupledPi2QueueDisc::QueueLimit", UintegerValue (15625000));
-  // Config::SetDefault ("ns3::DualQCoupledPi2QueueDisc::L4SMarkThresold", TimeValue (MilliSeconds (1)));
+  Config::SetDefault ("ns3::FqCoDelQueueDisc::CeThreshold", TimeValue (MilliSeconds (1)));
+  Config::SetDefault ("ns3::TcpPrague::UseEct0", BooleanValue (useEct0));
 
   ////////////////////////////////////////////////////////////
   // command-line argument parsing                          //
@@ -388,9 +382,9 @@ main (int argc, char *argv[])
   CommandLine cmd;
   cmd.AddValue ("stopTime", "Time at which simulation ends", stopTime);
   cmd.AddValue ("throughputSamplingInterval", "Interval at which throughput is sampled", throughputSamplingInterval);
-  cmd.AddValue ("firstTcpType", "First TCP type (cubic, prague, or reno)", firstTcpType);
-  cmd.AddValue ("secondTcpType", "Second TCP type (cubic, prague, or reno)", secondTcpType);
-  cmd.AddValue ("m3QueueType", "M3 queue type (dualq, fq, or codel)", m3QueueType);
+  cmd.AddValue ("firstTcpType", "First TCP type (prague, or reno)", firstTcpType);
+  cmd.AddValue ("secondTcpType", "Second TCP type (prague, or reno)", secondTcpType);
+  cmd.AddValue ("m3QueueType", "M3 queue type (fq, or codel)", m3QueueType);
   cmd.AddValue ("baseRtt", "base RTT", baseRtt);
   cmd.AddValue ("controlScenario", "control scenario (disable M1 bottleneck)", controlScenario);
   cmd.AddValue ("link3rate", "data rate of link 3 for FIFO scenarios", link3Rate);
@@ -419,10 +413,6 @@ main (int argc, char *argv[])
     {
       firstTcpTypeId = TcpLinuxReno::GetTypeId ();
     }
-  else if (firstTcpType == "cubic")
-    {
-      firstTcpTypeId = TcpCubic::GetTypeId ();
-    }
   else if (firstTcpType == "prague")
     {
       firstTcpTypeId = TcpPrague::GetTypeId ();
@@ -437,12 +427,7 @@ main (int argc, char *argv[])
       enableSecondTcp = true;
       secondTcpTypeId = TcpLinuxReno::GetTypeId ();
     }
-  else if (secondTcpType == "cubic")
-    {
-      enableSecondTcp = true;
-      secondTcpTypeId = TcpCubic::GetTypeId ();
-    }
-  else if (secondTcpType == "dctcp")
+  else if (secondTcpType == "prague")
     {
       enableSecondTcp = true;
       secondTcpTypeId = TcpPrague::GetTypeId ();
@@ -460,10 +445,6 @@ main (int argc, char *argv[])
     {
       m3QueueTypeId = FqCoDelQueueDisc::GetTypeId ();
     }
-  else if (m3QueueType == "dualq")
-    {
-      m3QueueTypeId = DualQCoupledPi2QueueDisc::GetTypeId ();
-    }
   else if (m3QueueType == "codel")
     {
       m3QueueTypeId = CoDelQueueDisc::GetTypeId ();
@@ -536,7 +517,6 @@ main (int argc, char *argv[])
 
   PointToPointHelper p2p;
   p2p.SetQueue ("ns3::DropTailQueue", "MaxSize", QueueSizeValue (QueueSize ("3p")));
-  // p2p.SetQueue ("ns3::DropTailQueue", "MaxSize", QueueSizeValue (QueueSize ("50p")));
   p2p.SetDeviceAttribute ("DataRate", DataRateValue (DataRate ("1000Mbps")));
   // Add delay only on the WAN links
   p2p.SetChannelAttribute ("Delay", TimeValue (oneWayDelay));
@@ -721,10 +701,13 @@ main (int argc, char *argv[])
   Simulator::Schedule (startTime + MilliSeconds (50), &ScheduleFirstPacketSinkConnection);
   Simulator::Schedule (throughputSamplingInterval, &TraceFirstThroughput, &firstTcpThroughputOfStream, throughputSamplingInterval);
   // Setup scheduled traces; TCP traces must be hooked after socket creation
-  Simulator::Schedule (startTime + MilliSeconds (50), &ScheduleSecondTcpRttTraceConnection, &secondTcpRttOfStream);
-  Simulator::Schedule (startTime + MilliSeconds (50), &ScheduleSecondTcpCwndTraceConnection, &secondTcpCwndOfStream);
-  Simulator::Schedule (startTime + MilliSeconds (50), &ScheduleSecondPacketSinkConnection);
-  Simulator::Schedule (throughputSamplingInterval, &TraceSecondThroughput, &secondTcpThroughputOfStream, throughputSamplingInterval);
+  if (enableSecondTcp)
+    {
+      Simulator::Schedule (startTime + MilliSeconds (50), &ScheduleSecondTcpRttTraceConnection, &secondTcpRttOfStream);
+      Simulator::Schedule (startTime + MilliSeconds (50), &ScheduleSecondTcpCwndTraceConnection, &secondTcpCwndOfStream);
+      Simulator::Schedule (startTime + MilliSeconds (50), &ScheduleSecondPacketSinkConnection);
+      Simulator::Schedule (throughputSamplingInterval, &TraceSecondThroughput, &secondTcpThroughputOfStream, throughputSamplingInterval);
+    }
   Simulator::Schedule (marksSamplingInterval, &TraceMarksFrequency, &m3MarksFrequencyOfStream, marksSamplingInterval);
   Simulator::Schedule (marksSamplingInterval, &TraceDropsFrequency, &m1DropsFrequencyOfStream, marksSamplingInterval);
 
diff --git a/experiments/tsvwg-issue-17-one-flow/run-single.sh b/experiments/tsvwg-issue-17-one-flow/run-single.sh
index beb6055..929b304 100755
--- a/experiments/tsvwg-issue-17-one-flow/run-single.sh
+++ b/experiments/tsvwg-issue-17-one-flow/run-single.sh
@@ -48,7 +48,7 @@
 
 link3rate=100Mbps
 rtt=80ms
-stopTime=10s
+stopTime=60s
 throughputSamplingInterval=200ms
 
 scenario_id=one-flow
